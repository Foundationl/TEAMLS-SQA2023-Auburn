operator:
  image:
    name: "stackgres/operator"
    tag: "development-jvm"
    pullPolicy: "IfNotPresent"
restapi:
  name: stackgres-restapi
  image:
    name: "stackgres/restapi"
    tag: "development-jvm"
    pullPolicy: "IfNotPresent"
adminui:
  name: stackgres-adminui
  image:
    name: "stackgres/admin-ui"
    tag: "development"
    pullPolicy: "IfNotPresent"
  service:
    # Set to LoadBalancer to expose admin UI with a load balancer
    # Set to NodePort to expose admin UI from kubernetes nodes
    type: ClusterIP
    # LoadBalancer will get created with the IP specified in this field.
    # This feature depends on whether the underlying cloud-provider supports
    # specifying the loadBalancerIP when a load balancer is created. This field
    # will be ignored if the cloud-provider does not support the feature.
    # loadBalancerIP:
    # If specified and supported by the platform, this will restrict traffic
    # through the cloud-provider load-balancer will be restricted to the
    # specified client IPs. This field will be ignored if the cloud-provider does
    # not support the feature.
    # More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    # loadBalancerSourceRanges:
    # The port used to expose the service on kubernetes nodes
    # nodePort:

serviceAccount:
  create: true

rbac:
  create: true

deploy:
  operator: true
  restapi: true

cert:
  autoapprove: true
  # key:
  # crt:
  # jwtRsaKey:
  # jwtRsaPub:

# Custom credentials for the operator's admin user
authentication:
  user: admin
#  password: <operator admin password>

prometheus:
  allowAutobind: true

grafana:
  #Embed an existing grafana by setting grafana.autoEmbed to true
  autoEmbed: false
  user: admin
  password: prom-operator
  # Set the HTTP scheme used by grafana:
  schema: http
  # Copy and paste grafana service hostname:
  # - kubectl get service prometheus-operator-grafana --template $'{{ .metadata.name }}.{{ .metadata.namespace }}.svc\n'
  # webHost: "prometheus-operator-grafana.default.svc"
  #Use follwing fields to indicate a secret where the grafana admin credentials are stored (replace user/password)
  #secretNamespace:
  #secretName:
  #secretUserKey:
  #secretPasswordKey:
  datasourceName: Prometheus
  # dashboardConfigMap:
  # dashboardId: 9628
  # Create grafana dashboard for postgres exporter and copy/paste share URL:
  # - Grafana > Create > Import > Grafana.com Dashboard 9628
  # Copy/paste grafana dashboard URL for postgres exporter:
  # - Grafana > Dashboard > Manage > Select postgres exporter dashboard > Copy URL
  # url: "http://localhost:3000/d/000000039/postgresql-database?orgId=1&refresh=10s"
  # Create and copy/paste grafana API token:
  # - Grafana > Configuration > API Keys > Add API key (for viewer) > Copy key value
  # token: "eyJrIjoidXc4NXJPa1VOdmNHVkFYMGJuME9zcnJucnBYRU1FQTMiLCJuIjoic3RhY2tncmVzIiwiaWQiOjF9"

#Following options are for developers only, but can also be useful in some cases ;)
developer: {}
  # logLevel: trace
  # showStackTraces: true
  # enableJvmDebug: false # Only work with JVM version and allow connect
  #                       # on port 8000 of operator Pod with jdb or similar
  # enableJvmDebugSuspend: false
  # externalOperatorIp: 172.17.0.1
  # externalOperatorPort: 8080
  # externalRestApiIp: 172.17.0.1
  # externalRestApiPort: 8081

#Setting prometheus-operator.create to true will install prometheus-operator and embed grafana in the stackgres UI
prometheus-operator:
  create: false
  prometheusOperator:
    createCustomResource: false
